{"version":3,"sources":["components/WeatherCard/style.js","components/WeatherCard/WeatherCard.js","components/SearchBar/style.js","components/SearchBar/SearchBar.js","apis/WeatherAPI.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","DayWrapper","StatusWrapper","TempWrapper","WeatherCard","props","day","width","height","src","status","alt","temprature","night","SearchBar","useState","text","setText","onSubmit","event","preventDefault","console","log","onFormSubmit","className","onChange","target","value","type","style","verticalAlign","placeholder","axios","create","baseURL","GoogleApiWrapper","apiKey","marginLeft","onClick","t","map","coord","latLng","lat","lng","google","zoom","initialCenter","KEY","App","arrDay","setArrDay","onTextSubmit","a","WeatherAPI","get","params","q","key","days","response","convertToWeatherList","data","forecast","forecastday","onMapClick","oldWeatherList","item","date","condition","icon","maxtemp_c","mintemp_c","loop","autoPlay","muted","Title","margin","WeatherContainer","display","justifyContent","weatherDay","CardWrapper","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41aad63b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-direction:column;\r\n    padding: 20px;\r\n    align-items: center;\r\n    background-color: white;\r\n    border-color: #000;\r\n    height: auto;\r\n    border: 1px solid #B8B8B8;\r\n    cursor: pointer;\r\n    margin-top: 50px;\r\n`\r\n\r\nexport const DayWrapper = styled.div`\r\ncolor: #BBBBBB;\r\n\r\n`\r\n\r\nexport const StatusWrapper = styled.div`\r\n\r\n`\r\n\r\nexport const TempWrapper = styled.div`\r\ndisplay: flex;\r\n\r\n*:nth-child(1) {\r\n    margin-inline-end: 5px;\r\n    color: #797979;\r\n}\r\n\r\n*:nth-child(2) {\r\n    color: #B8B8B8;\r\n}\r\n`","import React from \"react\";\r\nimport { Container, DayWrapper, StatusWrapper, TempWrapper } from \"./style\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst WeatherCard = (props) => {\r\n  return (\r\n    <Container>\r\n      <DayWrapper>\r\n        <div>{props.day}</div>\r\n      </DayWrapper>\r\n      <StatusWrapper>\r\n        <img width={50} height={50} src={props.status} alt='test'/>\r\n      </StatusWrapper>\r\n      <TempWrapper>\r\n        <div>{props.temprature.day}°</div>\r\n        <div>{props.temprature.night}°</div>\r\n      </TempWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nWeatherCard.propTypes = {\r\n  day: PropTypes.string,\r\n  status: PropTypes.string,\r\n  temprature: PropTypes.object,\r\n};\r\n\r\nexport default WeatherCard;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n\r\n  display:flex;\r\n  justify-content:center;\r\n\r\n  input{\r\n    height: 30px;\r\n    width: 415px;\r\n    font-size: larger;\r\n  }\r\n`","import React, { useState } from \"react\";\r\nimport { Container } from \"./style\";\r\n\r\n\r\n\r\nconst SearchBar = (props) => {\r\n  \r\n    const [text, setText] = useState(\"\");\r\n\r\n  const onChangeHandler = (event) => {\r\n    setText(event.target.value);\r\n}\r\n\r\nconst onFormSubmit = (event) => {\r\n  event.preventDefault();\r\n  console.log(text)\r\n  props.onFormSubmit(text);\r\n}\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <form onSubmit={onFormSubmit}>\r\n      <input className=\"search\" onChange={onChangeHandler} type=\"text\" style={{verticalAlign: 'top'}} value={text} placeholder=\"Search cities...\"></input>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.weatherapi.com/v1'\r\n});","import React from \"react\";\r\nimport { Map, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nconst SimpleMap = (props) => {\r\n\r\n    const style = {\r\n      width: \"50%\",\r\n      height: \"30%\",\r\n    };\r\n\r\n \r\n\r\n    return (\r\n      <div className=\"App\" style={{marginLeft: \"495px\"}}>\r\n        <Map\r\n          onClick={(t,map,coord)=> props.onClick(coord.latLng.lat()+','+coord.latLng.lng())}\r\n          google={props.google}\r\n          zoom={5}\r\n          initialCenter={{\r\n            lat: 32.02403973704364,\r\n            lng: 34.792883528573135,\r\n          }}\r\n          style={style}\r\n        />\r\n      </div>\r\n    );\r\n  \r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyCvS2p38RSdS78_zVVUSN4KxMcRFs1q5fE\",\r\n})(SimpleMap);\r\n\r\n\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport styled from \"styled-components\";\nimport SearchBar from \"./components/SearchBar\";\nimport WeatherAPI from \"./apis/WeatherAPI\";\n\nimport SimpleMap from \"./components/Map/Map\";\nconst KEY = \"092b9a34bffd402cb43194012201504\";\n\nconst App = () => {\n  const [arrDay, setArrDay] = useState([]);\n  const onTextSubmit = async (text) => {\n    const response = await WeatherAPI.get(\n      \"https://api.weatherapi.com/v1/forecast.json?\",\n      {\n        params: {\n          q: text,\n          key: KEY,\n          days: 7,\n        },\n      }\n    );\n    setArrDay(convertToWeatherList(response.data.forecast.forecastday));\n    console.log(response);\n  };\n\n  const onMapClick = async (text) => {\n    const response = await WeatherAPI.get(\n      \"https://api.weatherapi.com/v1/forecast.json?\",\n      {\n        params: {\n          q: text,\n          key: KEY,\n          days: 7,\n        },\n      }\n    );\n    setArrDay(convertToWeatherList(response.data.forecast.forecastday));\n  };\n\n  const convertToWeatherList = (oldWeatherList) => {\n    return oldWeatherList.map((item) => {\n\n      return {\n        day: item.date,\n        status: item.day.condition.icon,\n        temprature: { day: item.day.maxtemp_c, night: item.day.mintemp_c },\n      };\n    });\n  };\n  \n  return (\n    <div className=\"App\">\n      <div className=\"v-header container\">\n        <div className=\"fullscreen-video-wrap\">\n          <video\n            loop autoPlay muted\n            className=\"wrapper__video\"\n            src=\"weather.mp4\"\n          ></video>\n        </div>\n        <div className=\"header-overlay\">\n          <Title>Weather App</Title>\n        </div>\n        <div\n          className=\"header-content\"\n          style={{ margin: \"auto\", width: \"100%\" }}\n        >\n          <div>\n            <SearchBar onFormSubmit={onTextSubmit} />\n          </div>\n\n          <WeatherContainer\n            style={{\n              width: \"30%\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              margin: \"auto\",\n            }}\n          >\n            {arrDay.map((weatherDay) => {\n              return (\n                <CardWrapper key={Math.random()}>\n                  <WeatherCard\n                    day={weatherDay.day}\n                    status={weatherDay.status}\n                    temprature={weatherDay.temprature}\n                  />\n                </CardWrapper>\n              );\n            })}\n          </WeatherContainer>\n          <div className=\"H1\">\n            <h1>Click on The map to get 3 days forecast</h1>\n          </div>\n            <SimpleMap onClick={onMapClick} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nconst CardWrapper = styled.div`\n  width: 100%;\n`;\nconst WeatherContainer = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div`\n  color: white;\n  font-style: italic;\n  font-size: 70px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}